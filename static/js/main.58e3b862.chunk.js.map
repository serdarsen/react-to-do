{"version":3,"sources":["NewNoteInput.tsx","App.tsx","actions.ts","reportWebVitals.ts","notesReducer.ts","store.ts","index.tsx"],"names":["NewNoteInput","addNote","useState","note","setNote","onChange","event","target","value","type","name","placeholder","onClick","App","notes","useSelector","state","dispatch","useDispatch","payload","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAMaA,EAAsC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC1CC,mBAAS,IADiC,mBAC3DC,EAD2D,KACrDC,EADqD,KAYlE,OACE,gCACE,uBACEC,SAZa,SAACC,GAClBF,EAAQE,EAAMC,OAAOC,QAYjBA,MAAOL,EACPM,KAAK,OACLC,KAAK,OACLC,YAAY,SAEd,wBAAQC,QAdW,WACrBX,EAAQE,GACRC,EAAQ,KAYN,0BCESS,MAxBf,WACE,IAAMC,EAAQC,aACZ,SAACC,GAAD,OAAWA,EAAMF,SAEbG,EAAWC,cAMjB,OACE,qCACE,cAAC,EAAD,CAAcjB,QANA,SAACE,GACjBc,ECVmB,SAACd,GAAD,MAAmB,CACxCM,KAAM,WACNU,QAAShB,GDQEF,CAAQE,OAMf,uBACA,+BACGW,EAAMM,KAAI,SAACjB,GACV,OAAO,6BAAgBA,GAAPA,MAElB,8BETOkB,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,uBCHRQ,EAAe,CACnBhB,MAAO,ICJIiB,EAAQC,aDOO,WAGtB,IAFJhB,EAEG,uDAFiBc,EACpBG,EACG,uCACH,OAAQA,EAAOxB,MACb,IAAK,WACH,OAAO,2BAAKO,GAAZ,IAAmBF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBmB,EAAOd,YAEpD,QACE,OAAOH,MEXbkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.58e3b862.chunk.js","sourcesContent":["import React, { ChangeEvent, FC, useState } from \"react\";\n\ntype NewNoteInputProps = {\n  addNote: (note: string) => void;\n};\n\nexport const NewNoteInput: FC<NewNoteInputProps> = ({ addNote }) => {\n  const [note, setNote] = useState(\"\");\n\n  const updateNote = (event: ChangeEvent<HTMLInputElement>) => {\n    setNote(event.target.value);\n  };\n\n  const onAddNoteClick = () => {\n    addNote(note);\n    setNote(\"\");\n  };\n\n  return (\n    <div>\n      <input\n        onChange={updateNote}\n        value={note}\n        type=\"text\"\n        name=\"note\"\n        placeholder=\"Note\"\n      ></input>\n      <button onClick={onAddNoteClick}>Add Note</button>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { addNote } from \"./actions\";\nimport { NewNoteInput } from \"./NewNoteInput\";\nimport { NotesState } from \"./notesReducer\";\n\nfunction App() {\n  const notes = useSelector<NotesState, NotesState[\"notes\"]>(\n    (state) => state.notes\n  );\n  const dispatch = useDispatch();\n\n  const onAddNote = (note: string) => {\n    dispatch(addNote(note));\n  };\n\n  return (\n    <>\n      <NewNoteInput addNote={onAddNote} />\n      <hr />\n      <ul>\n        {notes.map((note) => {\n          return <li key={note}>{note}</li>;\n        })}\n        <li></li>\n      </ul>\n    </>\n  );\n}\n\nexport default App;\n","export type Action = { type: \"ADD_NOTE\"; payload: string };\n\nexport const addNote = (note: string) => ({\n  type: \"ADD_NOTE\",\n  payload: note,\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action } from \"./actions\";\n\nexport interface NotesState {\n  notes: string[];\n}\n\nconst initialState = {\n  notes: [],\n};\n\nexport const notesReducer = (\n  state: NotesState = initialState,\n  action: Action\n) => {\n  switch (action.type) {\n    case \"ADD_NOTE\": {\n      return { ...state, notes: [...state.notes, action.payload] };\n    }\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\nimport { notesReducer } from \"./notesReducer\";\n\nexport const store = createStore(notesReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}